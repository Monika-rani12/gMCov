CBMC version 5.11 (cbmc-5.11) 64-bit x86_64 linux
Parsing scmcc.c
Converting
Type-checking scmcc
Generating GOTO Program
Adding CPROVER library (x86_64)
Removal of function pointers and virtual functions
Generic Property Instrumentation
Rewriting existing assertions as assumptions
Running with 8 object bits, 56 offset bits (default)
Starting Bounded Model Checking
size of program expression: 54 steps
Generated 12 VCC(s), 12 remaining after simplification
Passing problem to string refinement loop with MiniSAT 2.2.1 without simplifier
converting SSA
Aiming to cover 12 goal(s)
Running string refinement loop with MiniSAT 2.2.1 without simplifier
BV-Refinement: post-processing
BV-Refinement: iteration 1
469 variables, 720 clauses
SAT checker: instance is SATISFIABLE
BV-Refinement: got SAT, and it simulates => SAT
Total iterations: 1
Covered function main decision `X > 50 && Y == 100 || Z < 90' true
Covered function main condition `X > 50' false
Covered function main condition `Y == 100' false
Covered function main condition `Z < 90' true
BV-Refinement: post-processing
BV-Refinement: iteration 1
469 variables, 712 clauses
SAT checker: instance is SATISFIABLE
BV-Refinement: got SAT, and it simulates => SAT
Total iterations: 1
Covered function main condition `X > 50' true
BV-Refinement: post-processing
BV-Refinement: iteration 1
469 variables, 713 clauses
SAT checker: instance is SATISFIABLE
BV-Refinement: got SAT, and it simulates => SAT
Total iterations: 1
Covered function main condition `Y == 100' true
BV-Refinement: post-processing
BV-Refinement: iteration 1
469 variables, 714 clauses
SAT checker: instance is SATISFIABLE
BV-Refinement: got SAT, and it simulates => SAT
Total iterations: 1
Covered function main MC/DC independence condition `!(Z < 90) && X > 50 && Y == 100'
Covered function main condition `Z < 90' false
BV-Refinement: post-processing
BV-Refinement: iteration 1
469 variables, 715 clauses
SAT checker: instance is SATISFIABLE
BV-Refinement: got SAT, and it simulates => SAT
Total iterations: 1
Covered function main MC/DC independence condition `!(Z < 90) && !(X > 50) && Y == 100'
Covered function main decision `X > 50 && Y == 100 || Z < 90' false
BV-Refinement: post-processing
BV-Refinement: iteration 1
469 variables, 716 clauses
SAT checker: instance is SATISFIABLE
BV-Refinement: got SAT, and it simulates => SAT
Total iterations: 1
Covered function main MC/DC independence condition `Z < 90 && !(X > 50) && Y == 100'
BV-Refinement: post-processing
BV-Refinement: iteration 1
469 variables, 713 clauses
SAT checker: instance is SATISFIABLE
BV-Refinement: got SAT, and it simulates => SAT
Total iterations: 1
Covered function main MC/DC independence condition `!(Z < 90) && X > 50 && !(Y == 100)'
Runtime decision procedure: 0.0169496s

** coverage results:
[main.coverage.1] file scmcc.c line 7 function main MC/DC independence condition `!(Z < 90) && !(X > 50) && Y == 100': SATISFIED
[main.coverage.2] file scmcc.c line 7 function main MC/DC independence condition `!(Z < 90) && X > 50 && !(Y == 100)': SATISFIED
[main.coverage.3] file scmcc.c line 7 function main MC/DC independence condition `!(Z < 90) && X > 50 && Y == 100': SATISFIED
[main.coverage.4] file scmcc.c line 7 function main MC/DC independence condition `Z < 90 && !(X > 50) && Y == 100': SATISFIED
[main.coverage.5] file scmcc.c line 7 function main decision `X > 50 && Y == 100 || Z < 90' false: SATISFIED
[main.coverage.6] file scmcc.c line 7 function main decision `X > 50 && Y == 100 || Z < 90' true: SATISFIED
[main.coverage.7] file scmcc.c line 7 function main condition `X > 50' false: SATISFIED
[main.coverage.8] file scmcc.c line 7 function main condition `X > 50' true: SATISFIED
[main.coverage.9] file scmcc.c line 7 function main condition `Y == 100' false: SATISFIED
[main.coverage.10] file scmcc.c line 7 function main condition `Y == 100' true: SATISFIED
[main.coverage.11] file scmcc.c line 7 function main condition `Z < 90' false: SATISFIED
[main.coverage.12] file scmcc.c line 7 function main condition `Z < 90' true: SATISFIED

** 12 of 12 covered (100.0%)
** Used 7 iterations
Test suite:
X=0, Y=0, Z=0
X=51, Y=0, Z=0
X=51, Y=100, Z=0
X=51, Y=100, Z=1073741824
X=35, Y=100, Z=1073741824
X=35, Y=100, Z=0
X=51, Y=356, Z=90

